name: Build wheels

on: [push, pull_request]

# Default parameters for all builds
env:
  ARTIFACT_RETENTION: ${{ github.ref == 'refs/heads/master' && '30' || '7' }}

jobs:
  cpython-linux-x86_64:
    name: 'Linux (${{ matrix.cibw_archs }}, ${{ matrix.manylinux_image }})'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        cibw_archs: ["x86_64"]
        manylinux_image: ["manylinux2010"]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.1.1
        env:
          CIBW_BEFORE_BUILD: pip install cython
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_archs }}
          CIBW_BUILD: "cp37-*"
          CIBW_SKIP: pp*
      - uses: actions/upload-artifact@v2
        with:
          name: Linux_${{ matrix.cibw_archs }}.zip
          path: ./wheelhouse/*.whl
          retention-days: ${{ env.ARTIFACT_RETENTION }}

# Experimental build using self-hosted runner. Marked as optional.
  cpython-linux-aarch64:
    name: 'Linux (${{ matrix.cibw_archs }}, ${{ matrix.manylinux_image }})'
    runs-on: self-hosted-frontend
    continue-on-error: true
    timeout-minutes: 15
    strategy:
      matrix:
        cibw_archs: ["aarch64"]
        manylinux_image: ["manylinux_2_28"]
        python_version: ["10"]
    steps:
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build wheel with docker
        run: |
          /usr/local/bin/docker run \
            -v$(pwd):/app \
            -w/app \
            --rm \
            -e PYBIN=/opt/python/cp3${{ matrix.python_version }}-cp3${{ matrix.python_version }}/bin \
            quay.io/pypa/${{ matrix.manylinux_image }}_${{ matrix.cibw_archs }} \
            bash -c "
              export PYTHONDONTWRITEBYTECODE=1
              set -e -x
              yum remove cmake -y
              yum install cmake3 -y
              echo '-->' \$PYBIN
              \$PYBIN/python -m pip install --upgrade pip
              \$PYBIN/pip install -r requirements.txt
              \$PYBIN/pip install cython
              mkdir -p /tmp/cibuildwheel/built_wheel
              \$PYBIN/python -m pip wheel ./ --wheel-dir=/tmp/cibuildwheel/built_wheel --no-deps
              mkdir -p ./repaired_wheel
              auditwheel repair -w ./repaired_wheel /tmp/cibuildwheel/built_wheel/*"
      - uses: actions/upload-artifact@v2
        with:
          name: Linux_${{ matrix.cibw_archs }}.zip
          path: ./repaired_wheel/*.whl
          retention-days: ${{ env.ARTIFACT_RETENTION }}

  cpython-macos-x86_64:
    name: 'macOS (${{ matrix.cibw_archs }})'
    runs-on: macos-latest
    strategy:
      matrix:
        cibw_archs: ["x86_64"]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.1.1
        env:
          CIBW_BEFORE_BUILD: 
            pip install cython &&
            brew install libomp ninja
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: "cp37-*"
          CIBW_SKIP: pp*
      - uses: actions/upload-artifact@v2
        with:
          name: macOS_${{ matrix.cibw_archs }}.zip
          path: ./wheelhouse/*.whl
          retention-days: ${{ env.ARTIFACT_RETENTION }}

# Experimental build using self-hosted runner. Marked as optional.
  cpython-macos-arm64:
    name: 'macOS (${{ matrix.cibw_archs }})'
    runs-on: self-hosted-frontend
    continue-on-error: true
    timeout-minutes: 15
    strategy:
      matrix:
        cibw_archs: ["arm64"]
        python_version: ["9", "10"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Build wheel
        run: |
          . /opt/brew_init.sh
          . /opt/conda_init.sh
          conda activate builder-env-python3${{ matrix.python_version }}
          python -m venv pyenv && . pyenv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install cython wheel delocate
          mkdir -p ./tmp/built_wheel
          python -m pip wheel ./ --wheel-dir=./tmp/built_wheel --no-deps
          mkdir -p ./repaired_wheel
          delocate-listdeps ./tmp/built_wheel/*
          delocate-wheel --require-archs arm64 -w ./repaired_wheel ./tmp/built_wheel/*
      - uses: actions/upload-artifact@v2
        with:
          name: macOS_${{ matrix.cibw_archs }}.zip
          path: ./repaired_wheel/*.whl
          retention-days: ${{ env.ARTIFACT_RETENTION }}

  cpython-windows:
    name: 'Windows (${{ matrix.cibw_archs }})'
    runs-on: windows-latest
    strategy:
      matrix:
        cibw_archs: [amd64]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup devCmd (vstools)
        uses: ilammy/msvc-dev-cmd@v1
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.1.2
        env:
          CIBW_BEFORE_BUILD: pip install cython ipython
          CIBW_ARCHS: "AMD64"
          CIBW_BUILD: "cp37-*"
          CIBW_SKIP: pp*
      - uses: actions/upload-artifact@v2
        with:
          name: Windows_${{ matrix.cibw_archs }}.zip
          path: ./wheelhouse/*.whl
          retention-days: ${{ env.ARTIFACT_RETENTION }}

  source-distribution:
    name: 'Source distribution'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'
      - name: Create sdist source
        run: |
          pip install cython
          python3 setup.py build_ext
          python3 setup.py sdist
      - uses: actions/upload-artifact@v2
        with:
          path: ./dist/*networkit*.tar.gz
          retention-days: ${{ env.ARTIFACT_RETENTION }}

  # This job checks whether the current workflow is triggered by a new tag with the following form: INT.INT or INT.INT.INT (for example: 1.0, 1.0.1, ...)
  # The result is saved in a variable and used as a conditional variable when uploading packages.
  check-release-tag:
    name: "Check for new release"
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.do-check.outputs.is-release }}
    steps:
      - name: Check release tag ${{ github.ref }}
        id: do-check
        run: |
          if [[ ${{ github.ref }} =~ ^refs\/tags\/[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
            echo "::set-output name=is-release::true"
          else
            echo "::set-output name=is-release::false"
          fi

  upload-packages:
    if: needs.check-release-tag.outputs.is-release == 'true' && github.repository == 'networkit/networkit'
    name: 'PyPi release upload'
    runs-on: ubuntu-20.04
    needs: [cpython-macos-x86_64, cpython-macos-arm64, cpython-linux-aarch64, cpython-linux-x86_64, cpython-windows, source-distribution, check-release-tag]
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ./dist
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'
      - name: Upload to TestPyPI
        run: |
          pip install twine 
          python3 -m twine upload --verbose --skip-existing ./dist/artifact/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_TOKEN }}
