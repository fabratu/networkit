name: build

on: [push, pull_request]

env:
  OMP_NUM_THREADS: 2
  CXX_STANDARD: 14
  MONOLITH: ON
  TLX_PATH: /home/runner/work/networkit/networkit/tlx

jobs:
  macos-build-apple-clang:
    name: "macOS ${{ matrix.os }} (latest apple-clang, Python 3.9): ${{ matrix.variant }}"
    runs-on: macos-${{ matrix.os }}
    env:
      CC: cc
      CXX: c++
    strategy:
      matrix:
        os: ['10.15'] # 11.0 temp. removed due to errors in preview image / git actions pipelines
        variant: ['full build', 'non-monolithic']
    continue-on-error: ${{ matrix.os == '11.0' }}
    steps:
      - name: Install prerequisites ðŸ“¦
        run: |
          brew install libomp
          brew install ninja
      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Checkout tlx
        if: matrix.variant == 'full build'
        uses: actions/checkout@v2
        with: 
          repository: tlx/tlx
          path: tlx
      - name: Prepare environment and run checks (full build)
        if: matrix.variant == 'full build'
        run:  ${{ github.workspace }}/.github/workflows/scripts/full.sh
        shell: bash
        env:
          TLX_PATH: /Users/runner/work/networkit/networkit/tlx
      - name: Prepare environment and run checks (non-monolithic)
        if: matrix.variant == 'non-monolithic'
        run:  ${{ github.workspace }}/.github/workflows/scripts/cpp_only.sh
        shell: bash
        env:
          MONOLITH: OFF

  macos-build-misc-compiler:
    name: "macOS ${{ matrix.os }} (latest ${{ matrix.variant }}, Python 3.9): core build"
    runs-on: macos-${{ matrix.os }}
    strategy:
      matrix:
        os: ['10.15']  # 11.0 temp. removed due to errors in preview image / git actions pipelines
        variant: ['llvm-11', 'gcc-10']
    continue-on-error: ${{ matrix.os == '11.0' }}
    steps:
      - name: Install prerequisites ðŸ“¦
        run: |
          brew install libomp
          brew install ninja
      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install compiler llvm
        if: matrix.variant == 'llvm-11'
        run: brew install llvm@11
      - name: Install compiler gcc
        if: matrix.variant == 'gcc-10'
        run: |
          brew install gcc@10
          brew link gcc
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Prepare environment and run checks (llvm)
        if: matrix.variant == 'llvm-11'
        run:  ${{ github.workspace }}/.github/workflows/scripts/cpp_only.sh
        shell: bash
        env:
          CC: /usr/local/opt/llvm/bin/clang
          CXX: /usr/local/opt/llvm/bin/clang++
      - name: Prepare environment and run checks (gcc)
        if: matrix.variant == 'gcc-10'
        run:  ${{ github.workspace }}/.github/workflows/scripts/cpp_only.sh
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10

  linux-build-latest-gcc:
    name: "Linux (latest gcc-10, Python 3.9): ${{ matrix.variant }}"
    runs-on: ubuntu-20.04
    env:
      CC: gcc-10
      CXX: g++-10
    strategy:
      matrix:
        variant: ['full build', 'core build', 'non-monolithic']
    steps:
      - name: Install prerequisites ðŸ“¦
        run:  |
          sudo apt-get install ninja-build
      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Checkout tlx
        if: matrix.variant == 'full build'
        uses: actions/checkout@v2
        with: 
          repository: tlx/tlx
          path: tlx
      - name: Prepare environment and run checks (full build)
        if: matrix.variant == 'full build'
        run:  ${{ github.workspace }}/.github/workflows/scripts/full.sh
        shell: bash
      - name: Prepare environment and run checks (core build)
        if: matrix.variant == 'core build'
        run:  ${{ github.workspace }}/.github/workflows/scripts/cpp_only.sh
        shell: bash
      - name: Prepare environment and run checks (non-monolithic)
        if: matrix.variant == 'non-monolithic'
        run:  ${{ github.workspace }}/.github/workflows/scripts/cpp_only.sh
        shell: bash

  linux-build-misc-compiler:
    name: "Linux (latest ${{ matrix.variant }}, Python 3.9): full build"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        variant: ['llvm-11']
    steps:
      - name: Install prerequisites ðŸ“¦
        run:  |
          curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/focal llvm-toolchain-focal-11 main" | sudo tee /etc/apt/sources.list.d/llvm11.list
          sudo apt-get update
          sudo apt-get install clang-11 libomp-11-dev ninja-build
      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Checkout tlx
        uses: actions/checkout@v2
        with: 
          repository: tlx/tlx
          path: tlx
      - name: Prepare environment and run checks
        run:  ${{ github.workspace }}/.github/workflows/scripts/full.sh
        shell: bash
        env:
          CC: clang-11
          CXX: clang++-11

  linux-build-min-support:
    name: "Linux (${{ matrix.variant }}, Python 3.6): full build"
    runs-on: ubuntu-16.04
    strategy:
      matrix:
        variant: ['gcc-5', 'clang-3.9']
    steps:
      - name: Install prerequisites ðŸ“¦
        run:  |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install ninja-build
          sudo apt-get install libomp5 libomp-dev clang-3.9 clang++-3.9
      - name: Setup Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Checkout tlx
        uses: actions/checkout@v2
        with: 
          repository: tlx/tlx
          path: tlx
      - name: Prepare environment and run checks (gcc-5)
        if: matrix.variant == 'gcc-5'
        run:  ${{ github.workspace }}/.github/workflows/scripts/full.sh
        shell: bash
        env:
          CC: gcc-5
          CXX: g++-5
      - name: Prepare environment and run checks (clang-3.9)
        if: matrix.variant == 'clang-3.9'
        run:  ${{ github.workspace }}/.github/workflows/scripts/full.sh
        shell: bash
        env:
          CC: clang-3.9
          CXX: clang++-3.9

  linux-build-conformance:
    name: "Linux (latest gcc-10): C++${{ matrix.variant }} conformance"
    runs-on: ubuntu-20.04
    env:
      CC: gcc-10
      CXX: g++-10
    strategy:
      matrix:
        variant: ['17', '20']
    steps:
      - name: Install prerequisites ðŸ“¦
        run:  |
          sudo apt-get install ninja-build
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Prepare environment and run checks (C++)
        run:  ${{ github.workspace }}/.github/workflows/scripts/cpp_only.sh
        shell: bash
        env:
          CXX_STANDARD: ${{ matrix.variant }}

  linux-build-clang-tidy:
    name: "Linux (clang-11): clang-tidy build"
    runs-on: ubuntu-20.04
    env:
      CC: clang
      CXX: clang++
    steps:
      - name: Install prerequisites
        run: |
          curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/focal llvm-toolchain-focal-11 main" | sudo tee /etc/apt/sources.list.d/llvm11.list
          sudo apt-get update
          sudo apt-get install libomp-11-dev clang-11 clang-tidy-11 ninja-build
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Prepare environment and run checks
        run:  ${{ github.workspace }}/.github/workflows/scripts/clang_tidy.sh
        shell: bash

  linux-build-core-sanitizers-coverage:
    name: "Linux (gcc-10, Python 3.9): core build, sanitizers, coverage"
    runs-on: ubuntu-20.04
    env:
      CC: gcc-10
      CXX: g++-10
    steps:
      - name: Install prerequisites
        run:  |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install ninja-build gcc-10 g++-10
      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Prepare environment and run checks
        run:  ${{ github.workspace }}/.github/workflows/scripts/core_sanitizers_coverage.sh
        shell: bash
      - name: Update Coveralls ðŸš€
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          cd ${{ github.workspace }}
          . pyenv/bin/activate
          coveralls -E ".*test/.*" -E ".*CMakeFiles.*" --exclude extlibs --exclude pyenv --exclude scripts --root ${{ github.workspace }} --dump $COVERALLS_DUMP_FILE
          python3 ${{ github.workspace }}/.github/workflows/scripts/upload_coverage.py
        env:
          COVERALLS_REPO_TOKEN: ${{Â secrets.COVERALLS_REPO_TOKEN }}
          COVERALLS_DUMP_FILE: coveralls.dump
          COVERALLS_SVC_NUM: ${{ github.run_number }}

  windows-build-msvc:
    name: "Windows Server 2019 (msvc 14.28): ${{ matrix.type }} build, ${{ matrix.variant }}"
    runs-on: windows-2019
    env:
      MSBUILD_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\devenv.com
      SLN_PATH: ${{ github.workspace }}\build\networkit.sln
      VS_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\
    strategy:
      matrix:
        type: ['Release', 'Debug']
        variant: ['monolithic', 'non-monolithic']
    steps:
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Prepare environment and run checks
        run: |
          cd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\"
          ./vcvarsall.bat x64
          md ${{ github.workspace }}\build && cd ${{ github.workspace }}\build
          cmake -G "Visual Studio 16 2019" -A x64 -DNETWORKIT_STATIC=ON -DNETWORKIT_BUILD_TESTS=ON -DNETWORKIT_MONOLITH=${{ matrix.variant }} ..
          cd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\"
          ./devenv.com $Env:GITHUB_WORKSPACE\build\networkit.sln /build ${{ matrix.type }}
          cd ${{ github.workspace }}\build
          ctest -V -C ${{ matrix.type }}

  documentation-build:
    name: "Documentation build"
    runs-on: ubuntu-20.04
    env:
      CC: gcc-10
      CXX: g++-10
    steps:
      - name: Install prerequisites ðŸ“¦
        run:  |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install doxygen pandoc
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Prepare environment and run checks
        run:  ${{ github.workspace }}/.github/workflows/scripts/documentation.sh
        shell: bash
      - name: Deploy networkit.github.io ðŸš€
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.SECRET_DEPLOY_GITHUB_PAGES }}
          external_repository: networkit/dev-docs
          publish_branch:  master
          publish_dir: ./core_build/htmldocs
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

  style-guide-compliance-build:
    name: "Style guide compliance build"
    runs-on: ubuntu-20.04
    steps:
      - name: Install prerequisites ðŸ“¦
        run: |
          curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/focal llvm-toolchain-focal-11 main" | sudo tee /etc/apt/sources.list.d/llvm11.list
          sudo apt-get update
          sudo apt-get install clang-format-11
      - name: Checkout networkit
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Prepare environment and run checks
        run:  |
          set -e
          ./check_code.sh -v
